                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _VFD_printf
                                     13 	.globl _VFD_putc
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _FL
                                     21 	.globl _P
                                     22 	.globl _TF2
                                     23 	.globl _EXF2
                                     24 	.globl _RCLK
                                     25 	.globl _TCLK
                                     26 	.globl _EXEN2
                                     27 	.globl _TR2
                                     28 	.globl _C_T2
                                     29 	.globl _CP_RL2
                                     30 	.globl _T2CON_7
                                     31 	.globl _T2CON_6
                                     32 	.globl _T2CON_5
                                     33 	.globl _T2CON_4
                                     34 	.globl _T2CON_3
                                     35 	.globl _T2CON_2
                                     36 	.globl _T2CON_1
                                     37 	.globl _T2CON_0
                                     38 	.globl _PT2
                                     39 	.globl _PS
                                     40 	.globl _PT1
                                     41 	.globl _PX1
                                     42 	.globl _PT0
                                     43 	.globl _PX0
                                     44 	.globl _RD
                                     45 	.globl _WR
                                     46 	.globl _T1
                                     47 	.globl _T0
                                     48 	.globl _INT1
                                     49 	.globl _INT0
                                     50 	.globl _TXD
                                     51 	.globl _RXD
                                     52 	.globl _P3_7
                                     53 	.globl _P3_6
                                     54 	.globl _P3_5
                                     55 	.globl _P3_4
                                     56 	.globl _P3_3
                                     57 	.globl _P3_2
                                     58 	.globl _P3_1
                                     59 	.globl _P3_0
                                     60 	.globl _EA
                                     61 	.globl _ET2
                                     62 	.globl _ES
                                     63 	.globl _ET1
                                     64 	.globl _EX1
                                     65 	.globl _ET0
                                     66 	.globl _EX0
                                     67 	.globl _P2_7
                                     68 	.globl _P2_6
                                     69 	.globl _P2_5
                                     70 	.globl _P2_4
                                     71 	.globl _P2_3
                                     72 	.globl _P2_2
                                     73 	.globl _P2_1
                                     74 	.globl _P2_0
                                     75 	.globl _SM0
                                     76 	.globl _SM1
                                     77 	.globl _SM2
                                     78 	.globl _REN
                                     79 	.globl _TB8
                                     80 	.globl _RB8
                                     81 	.globl _TI
                                     82 	.globl _RI
                                     83 	.globl _T2EX
                                     84 	.globl _T2
                                     85 	.globl _P1_7
                                     86 	.globl _P1_6
                                     87 	.globl _P1_5
                                     88 	.globl _P1_4
                                     89 	.globl _P1_3
                                     90 	.globl _P1_2
                                     91 	.globl _P1_1
                                     92 	.globl _P1_0
                                     93 	.globl _TF1
                                     94 	.globl _TR1
                                     95 	.globl _TF0
                                     96 	.globl _TR0
                                     97 	.globl _IE1
                                     98 	.globl _IT1
                                     99 	.globl _IE0
                                    100 	.globl _IT0
                                    101 	.globl _P0_7
                                    102 	.globl _P0_6
                                    103 	.globl _P0_5
                                    104 	.globl _P0_4
                                    105 	.globl _P0_3
                                    106 	.globl _P0_2
                                    107 	.globl _P0_1
                                    108 	.globl _P0_0
                                    109 	.globl _nothing
                                    110 	.globl _B
                                    111 	.globl _A
                                    112 	.globl _ACC
                                    113 	.globl _PSW
                                    114 	.globl _TH2
                                    115 	.globl _TL2
                                    116 	.globl _RCAP2H
                                    117 	.globl _RCAP2L
                                    118 	.globl _T2MOD
                                    119 	.globl _T2CON
                                    120 	.globl _IP
                                    121 	.globl _P3
                                    122 	.globl _IE
                                    123 	.globl _P2
                                    124 	.globl _SBUF
                                    125 	.globl _SCON
                                    126 	.globl _P1
                                    127 	.globl _TH1
                                    128 	.globl _TH0
                                    129 	.globl _TL1
                                    130 	.globl _TL0
                                    131 	.globl _TMOD
                                    132 	.globl _TCON
                                    133 	.globl _PCON
                                    134 	.globl _DPH
                                    135 	.globl _DPL
                                    136 	.globl _SP
                                    137 	.globl _P0
                                    138 	.globl _dirT
                                    139 	.globl _offsetT
                                    140 	.globl _T
                                    141 	.globl _dirRH
                                    142 	.globl _offsetRH
                                    143 	.globl _RH
                                    144 	.globl _mDelay10uS
                                    145 	.globl _mDelaymS
                                    146 ;--------------------------------------------------------
                                    147 ; special function registers
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0	=	0x0080
                           000081   152 _SP	=	0x0081
                           000082   153 _DPL	=	0x0082
                           000083   154 _DPH	=	0x0083
                           000087   155 _PCON	=	0x0087
                           000088   156 _TCON	=	0x0088
                           000089   157 _TMOD	=	0x0089
                           00008A   158 _TL0	=	0x008a
                           00008B   159 _TL1	=	0x008b
                           00008C   160 _TH0	=	0x008c
                           00008D   161 _TH1	=	0x008d
                           000090   162 _P1	=	0x0090
                           000098   163 _SCON	=	0x0098
                           000099   164 _SBUF	=	0x0099
                           0000A0   165 _P2	=	0x00a0
                           0000A8   166 _IE	=	0x00a8
                           0000B0   167 _P3	=	0x00b0
                           0000B8   168 _IP	=	0x00b8
                           0000C8   169 _T2CON	=	0x00c8
                           0000C9   170 _T2MOD	=	0x00c9
                           0000CA   171 _RCAP2L	=	0x00ca
                           0000CB   172 _RCAP2H	=	0x00cb
                           0000CC   173 _TL2	=	0x00cc
                           0000CD   174 _TH2	=	0x00cd
                           0000D0   175 _PSW	=	0x00d0
                           0000E0   176 _ACC	=	0x00e0
                           0000E0   177 _A	=	0x00e0
                           0000F0   178 _B	=	0x00f0
                           0000FF   179 _nothing	=	0x00ff
                                    180 ;--------------------------------------------------------
                                    181 ; special function bits
                                    182 ;--------------------------------------------------------
                                    183 	.area RSEG    (ABS,DATA)
      000000                        184 	.org 0x0000
                           000080   185 _P0_0	=	0x0080
                           000081   186 _P0_1	=	0x0081
                           000082   187 _P0_2	=	0x0082
                           000083   188 _P0_3	=	0x0083
                           000084   189 _P0_4	=	0x0084
                           000085   190 _P0_5	=	0x0085
                           000086   191 _P0_6	=	0x0086
                           000087   192 _P0_7	=	0x0087
                           000088   193 _IT0	=	0x0088
                           000089   194 _IE0	=	0x0089
                           00008A   195 _IT1	=	0x008a
                           00008B   196 _IE1	=	0x008b
                           00008C   197 _TR0	=	0x008c
                           00008D   198 _TF0	=	0x008d
                           00008E   199 _TR1	=	0x008e
                           00008F   200 _TF1	=	0x008f
                           000090   201 _P1_0	=	0x0090
                           000091   202 _P1_1	=	0x0091
                           000092   203 _P1_2	=	0x0092
                           000093   204 _P1_3	=	0x0093
                           000094   205 _P1_4	=	0x0094
                           000095   206 _P1_5	=	0x0095
                           000096   207 _P1_6	=	0x0096
                           000097   208 _P1_7	=	0x0097
                           000090   209 _T2	=	0x0090
                           000091   210 _T2EX	=	0x0091
                           000098   211 _RI	=	0x0098
                           000099   212 _TI	=	0x0099
                           00009A   213 _RB8	=	0x009a
                           00009B   214 _TB8	=	0x009b
                           00009C   215 _REN	=	0x009c
                           00009D   216 _SM2	=	0x009d
                           00009E   217 _SM1	=	0x009e
                           00009F   218 _SM0	=	0x009f
                           0000A0   219 _P2_0	=	0x00a0
                           0000A1   220 _P2_1	=	0x00a1
                           0000A2   221 _P2_2	=	0x00a2
                           0000A3   222 _P2_3	=	0x00a3
                           0000A4   223 _P2_4	=	0x00a4
                           0000A5   224 _P2_5	=	0x00a5
                           0000A6   225 _P2_6	=	0x00a6
                           0000A7   226 _P2_7	=	0x00a7
                           0000A8   227 _EX0	=	0x00a8
                           0000A9   228 _ET0	=	0x00a9
                           0000AA   229 _EX1	=	0x00aa
                           0000AB   230 _ET1	=	0x00ab
                           0000AC   231 _ES	=	0x00ac
                           0000AD   232 _ET2	=	0x00ad
                           0000AF   233 _EA	=	0x00af
                           0000B0   234 _P3_0	=	0x00b0
                           0000B1   235 _P3_1	=	0x00b1
                           0000B2   236 _P3_2	=	0x00b2
                           0000B3   237 _P3_3	=	0x00b3
                           0000B4   238 _P3_4	=	0x00b4
                           0000B5   239 _P3_5	=	0x00b5
                           0000B6   240 _P3_6	=	0x00b6
                           0000B7   241 _P3_7	=	0x00b7
                           0000B0   242 _RXD	=	0x00b0
                           0000B1   243 _TXD	=	0x00b1
                           0000B2   244 _INT0	=	0x00b2
                           0000B3   245 _INT1	=	0x00b3
                           0000B4   246 _T0	=	0x00b4
                           0000B5   247 _T1	=	0x00b5
                           0000B6   248 _WR	=	0x00b6
                           0000B7   249 _RD	=	0x00b7
                           0000B8   250 _PX0	=	0x00b8
                           0000B9   251 _PT0	=	0x00b9
                           0000BA   252 _PX1	=	0x00ba
                           0000BB   253 _PT1	=	0x00bb
                           0000BC   254 _PS	=	0x00bc
                           0000BD   255 _PT2	=	0x00bd
                           0000C8   256 _T2CON_0	=	0x00c8
                           0000C9   257 _T2CON_1	=	0x00c9
                           0000CA   258 _T2CON_2	=	0x00ca
                           0000CB   259 _T2CON_3	=	0x00cb
                           0000CC   260 _T2CON_4	=	0x00cc
                           0000CD   261 _T2CON_5	=	0x00cd
                           0000CE   262 _T2CON_6	=	0x00ce
                           0000CF   263 _T2CON_7	=	0x00cf
                           0000C8   264 _CP_RL2	=	0x00c8
                           0000C9   265 _C_T2	=	0x00c9
                           0000CA   266 _TR2	=	0x00ca
                           0000CB   267 _EXEN2	=	0x00cb
                           0000CC   268 _TCLK	=	0x00cc
                           0000CD   269 _RCLK	=	0x00cd
                           0000CE   270 _EXF2	=	0x00ce
                           0000CF   271 _TF2	=	0x00cf
                           0000D0   272 _P	=	0x00d0
                           0000D1   273 _FL	=	0x00d1
                           0000D2   274 _OV	=	0x00d2
                           0000D3   275 _RS0	=	0x00d3
                           0000D4   276 _RS1	=	0x00d4
                           0000D5   277 _F0	=	0x00d5
                           0000D6   278 _AC	=	0x00d6
                           0000D7   279 _CY	=	0x00d7
                                    280 ;--------------------------------------------------------
                                    281 ; overlayable register banks
                                    282 ;--------------------------------------------------------
                                    283 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        284 	.ds 8
                                    285 ;--------------------------------------------------------
                                    286 ; internal ram data
                                    287 ;--------------------------------------------------------
                                    288 	.area DSEG    (DATA)
      000000                        289 _RH::
      000000                        290 	.ds 2
      000002                        291 _offsetRH::
      000002                        292 	.ds 1
      000003                        293 _dirRH::
      000003                        294 	.ds 1
      000004                        295 _T::
      000004                        296 	.ds 2
      000006                        297 _offsetT::
      000006                        298 	.ds 1
      000007                        299 _dirT::
      000007                        300 	.ds 1
      000008                        301 _main_chksum_327680_70:
      000008                        302 	.ds 1
      000009                        303 _main_humidity_131073_48:
      000009                        304 	.ds 5
      00000E                        305 _main_temperature_131074_49:
      00000E                        306 	.ds 6
                                    307 ;--------------------------------------------------------
                                    308 ; overlayable items in internal ram 
                                    309 ;--------------------------------------------------------
                                    310 	.area	OSEG    (OVR,DATA)
                                    311 ;--------------------------------------------------------
                                    312 ; Stack segment in internal ram 
                                    313 ;--------------------------------------------------------
                                    314 	.area	SSEG
      000000                        315 __start__stack:
      000000                        316 	.ds	1
                                    317 
                                    318 ;--------------------------------------------------------
                                    319 ; indirectly addressable internal ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area ISEG    (DATA)
                                    322 ;--------------------------------------------------------
                                    323 ; absolute internal ram data
                                    324 ;--------------------------------------------------------
                                    325 	.area IABS    (ABS,DATA)
                                    326 	.area IABS    (ABS,DATA)
                                    327 ;--------------------------------------------------------
                                    328 ; bit data
                                    329 ;--------------------------------------------------------
                                    330 	.area BSEG    (BIT)
                                    331 ;--------------------------------------------------------
                                    332 ; paged external ram data
                                    333 ;--------------------------------------------------------
                                    334 	.area PSEG    (PAG,XDATA)
                                    335 ;--------------------------------------------------------
                                    336 ; external ram data
                                    337 ;--------------------------------------------------------
                                    338 	.area XSEG    (XDATA)
                                    339 ;--------------------------------------------------------
                                    340 ; absolute external ram data
                                    341 ;--------------------------------------------------------
                                    342 	.area XABS    (ABS,XDATA)
                                    343 ;--------------------------------------------------------
                                    344 ; external initialized ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area XISEG   (XDATA)
                                    347 	.area HOME    (CODE)
                                    348 	.area GSINIT0 (CODE)
                                    349 	.area GSINIT1 (CODE)
                                    350 	.area GSINIT2 (CODE)
                                    351 	.area GSINIT3 (CODE)
                                    352 	.area GSINIT4 (CODE)
                                    353 	.area GSINIT5 (CODE)
                                    354 	.area GSINIT  (CODE)
                                    355 	.area GSFINAL (CODE)
                                    356 	.area CSEG    (CODE)
                                    357 ;--------------------------------------------------------
                                    358 ; interrupt vector 
                                    359 ;--------------------------------------------------------
                                    360 	.area HOME    (CODE)
      000000                        361 __interrupt_vect:
      000000 02r00r00         [24]  362 	ljmp	__sdcc_gsinit_startup
                                    363 ;--------------------------------------------------------
                                    364 ; global & static initialisations
                                    365 ;--------------------------------------------------------
                                    366 	.area HOME    (CODE)
                                    367 	.area GSINIT  (CODE)
                                    368 	.area GSFINAL (CODE)
                                    369 	.area GSINIT  (CODE)
                                    370 	.globl __sdcc_gsinit_startup
                                    371 	.globl __sdcc_program_startup
                                    372 	.globl __start__stack
                                    373 	.globl __mcs51_genXINIT
                                    374 	.globl __mcs51_genXRAMCLEAR
                                    375 	.globl __mcs51_genRAMCLEAR
                                    376 ;	main.c:58: unsigned char offsetRH = 0;
      000000 75*02 00         [24]  377 	mov	_offsetRH,#0x00
                                    378 ;	main.c:59: char dirRH = 1;
      000003 75*03 01         [24]  379 	mov	_dirRH,#0x01
                                    380 ;	main.c:61: unsigned char offsetT = 0;
      000006 75*06 00         [24]  381 	mov	_offsetT,#0x00
                                    382 ;	main.c:62: char dirT = 1;
      000009 75*07 01         [24]  383 	mov	_dirT,#0x01
                                    384 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  385 	ljmp	__sdcc_program_startup
                                    386 ;--------------------------------------------------------
                                    387 ; Home
                                    388 ;--------------------------------------------------------
                                    389 	.area HOME    (CODE)
                                    390 	.area HOME    (CODE)
      000003                        391 __sdcc_program_startup:
      000003 02r00r7C         [24]  392 	ljmp	_main
                                    393 ;	return from main will return to caller
                                    394 ;--------------------------------------------------------
                                    395 ; code
                                    396 ;--------------------------------------------------------
                                    397 	.area CSEG    (CODE)
                                    398 ;------------------------------------------------------------
                                    399 ;Allocation info for local variables in function 'mDelay10uS'
                                    400 ;------------------------------------------------------------
                                    401 ;n                         Allocated to registers 
                                    402 ;------------------------------------------------------------
                                    403 ;	main.c:64: void mDelay10uS(unsigned int n)  // Delay in units of 10 uS
                                    404 ;	-----------------------------------------
                                    405 ;	 function mDelay10uS
                                    406 ;	-----------------------------------------
      000000                        407 _mDelay10uS:
                           000007   408 	ar7 = 0x07
                           000006   409 	ar6 = 0x06
                           000005   410 	ar5 = 0x05
                           000004   411 	ar4 = 0x04
                           000003   412 	ar3 = 0x03
                           000002   413 	ar2 = 0x02
                           000001   414 	ar1 = 0x01
                           000000   415 	ar0 = 0x00
      000000 AE 82            [24]  416 	mov	r6,dpl
      000002 AF 83            [24]  417 	mov	r7,dph
                                    418 ;	main.c:66: while ( n )
      000004                        419 00101$:
      000004 EE               [12]  420 	mov	a,r6
      000005 4F               [12]  421 	orl	a,r7
      000006 60 09            [24]  422 	jz	00104$
                                    423 ;	main.c:68: ++ nothing;
      000008 05 FF            [12]  424 	inc	_nothing
                                    425 ;	main.c:69: -- n;
      00000A 1E               [12]  426 	dec	r6
      00000B BE FF 01         [24]  427 	cjne	r6,#0xff,00116$
      00000E 1F               [12]  428 	dec	r7
      00000F                        429 00116$:
      00000F 80 F3            [24]  430 	sjmp	00101$
      000011                        431 00104$:
                                    432 ;	main.c:71: }
      000011 22               [24]  433 	ret
                                    434 ;------------------------------------------------------------
                                    435 ;Allocation info for local variables in function 'mDelaymS'
                                    436 ;------------------------------------------------------------
                                    437 ;n                         Allocated to registers 
                                    438 ;------------------------------------------------------------
                                    439 ;	main.c:73: void mDelaymS(unsigned int n)                              // Delay in mS
                                    440 ;	-----------------------------------------
                                    441 ;	 function mDelaymS
                                    442 ;	-----------------------------------------
      000012                        443 _mDelaymS:
      000012 AE 82            [24]  444 	mov	r6,dpl
      000014 AF 83            [24]  445 	mov	r7,dph
                                    446 ;	main.c:75: while ( n )
      000016                        447 00101$:
      000016 EE               [12]  448 	mov	a,r6
      000017 4F               [12]  449 	orl	a,r7
      000018 60 15            [24]  450 	jz	00104$
                                    451 ;	main.c:78: mDelay10uS(100);
      00001A 90 00 64         [24]  452 	mov	dptr,#0x0064
      00001D C0 07            [24]  453 	push	ar7
      00001F C0 06            [24]  454 	push	ar6
      000021 12r00r00         [24]  455 	lcall	_mDelay10uS
      000024 D0 06            [24]  456 	pop	ar6
      000026 D0 07            [24]  457 	pop	ar7
                                    458 ;	main.c:79: -- n;
      000028 1E               [12]  459 	dec	r6
      000029 BE FF 01         [24]  460 	cjne	r6,#0xff,00116$
      00002C 1F               [12]  461 	dec	r7
      00002D                        462 00116$:
      00002D 80 E7            [24]  463 	sjmp	00101$
      00002F                        464 00104$:
                                    465 ;	main.c:81: }
      00002F 22               [24]  466 	ret
                                    467 ;------------------------------------------------------------
                                    468 ;Allocation info for local variables in function 'VFD_putc'
                                    469 ;------------------------------------------------------------
                                    470 ;c                         Allocated to registers r7 
                                    471 ;------------------------------------------------------------
                                    472 ;	main.c:83: void VFD_putc(char c)
                                    473 ;	-----------------------------------------
                                    474 ;	 function VFD_putc
                                    475 ;	-----------------------------------------
      000030                        476 _VFD_putc:
      000030 AF 82            [24]  477 	mov	r7,dpl
                                    478 ;	main.c:86: mDelay10uS(10);
      000032 90 00 0A         [24]  479 	mov	dptr,#0x000a
      000035 C0 07            [24]  480 	push	ar7
      000037 12r00r00         [24]  481 	lcall	_mDelay10uS
      00003A D0 07            [24]  482 	pop	ar7
                                    483 ;	main.c:87: VFD_CS = 0;
                                    484 ;	assignBit
      00003C C2 B3            [12]  485 	clr	_P3_3
                                    486 ;	main.c:88: VFD_DATA = c;
      00003E 8F 90            [24]  487 	mov	_P1,r7
                                    488 ;	main.c:89: VFD_WR = 0;
                                    489 ;	assignBit
      000040 C2 B2            [12]  490 	clr	_P3_2
                                    491 ;	main.c:90: VFD_WR = 1;
                                    492 ;	assignBit
      000042 D2 B2            [12]  493 	setb	_P3_2
                                    494 ;	main.c:91: VFD_CS = 1;
                                    495 ;	assignBit
      000044 D2 B3            [12]  496 	setb	_P3_3
                                    497 ;	main.c:92: return;
                                    498 ;	main.c:93: }
      000046 22               [24]  499 	ret
                                    500 ;------------------------------------------------------------
                                    501 ;Allocation info for local variables in function 'VFD_printf'
                                    502 ;------------------------------------------------------------
                                    503 ;str                       Allocated to registers r5 r6 r7 
                                    504 ;i                         Allocated to registers r4 
                                    505 ;------------------------------------------------------------
                                    506 ;	main.c:103: void VFD_printf(char* str)
                                    507 ;	-----------------------------------------
                                    508 ;	 function VFD_printf
                                    509 ;	-----------------------------------------
      000047                        510 _VFD_printf:
      000047 AD 82            [24]  511 	mov	r5,dpl
      000049 AE 83            [24]  512 	mov	r6,dph
      00004B AF F0            [24]  513 	mov	r7,b
                                    514 ;	main.c:106: while(str[i])
      00004D 7C 00            [12]  515 	mov	r4,#0x00
      00004F                        516 00101$:
      00004F EC               [12]  517 	mov	a,r4
      000050 2D               [12]  518 	add	a,r5
      000051 F9               [12]  519 	mov	r1,a
      000052 E4               [12]  520 	clr	a
      000053 3E               [12]  521 	addc	a,r6
      000054 FA               [12]  522 	mov	r2,a
      000055 8F 03            [24]  523 	mov	ar3,r7
      000057 89 82            [24]  524 	mov	dpl,r1
      000059 8A 83            [24]  525 	mov	dph,r2
      00005B 8B F0            [24]  526 	mov	b,r3
      00005D 12r00r00         [24]  527 	lcall	__gptrget
      000060 FB               [12]  528 	mov	r3,a
      000061 60 18            [24]  529 	jz	00104$
                                    530 ;	main.c:108: VFD_putc(str[i]);
      000063 8B 82            [24]  531 	mov	dpl,r3
      000065 C0 07            [24]  532 	push	ar7
      000067 C0 06            [24]  533 	push	ar6
      000069 C0 05            [24]  534 	push	ar5
      00006B C0 04            [24]  535 	push	ar4
      00006D 12r00r30         [24]  536 	lcall	_VFD_putc
      000070 D0 04            [24]  537 	pop	ar4
      000072 D0 05            [24]  538 	pop	ar5
      000074 D0 06            [24]  539 	pop	ar6
      000076 D0 07            [24]  540 	pop	ar7
                                    541 ;	main.c:109: i++;
      000078 0C               [12]  542 	inc	r4
      000079 80 D4            [24]  543 	sjmp	00101$
      00007B                        544 00104$:
                                    545 ;	main.c:111: }
      00007B 22               [24]  546 	ret
                                    547 ;------------------------------------------------------------
                                    548 ;Allocation info for local variables in function 'main'
                                    549 ;------------------------------------------------------------
                                    550 ;__1310720001              Allocated to registers 
                                    551 ;cmd                       Allocated to registers 
                                    552 ;__1310720003              Allocated to registers 
                                    553 ;cmd                       Allocated to registers 
                                    554 ;__1310720001              Allocated to registers 
                                    555 ;cmd                       Allocated to registers 
                                    556 ;__1310720003              Allocated to registers 
                                    557 ;cmd                       Allocated to registers 
                                    558 ;chksum                    Allocated with name '_main_chksum_327680_70'
                                    559 ;i                         Allocated to registers r7 
                                    560 ;i                         Allocated to registers r7 
                                    561 ;i                         Allocated to registers r7 
                                    562 ;res                       Allocated to registers r6 
                                    563 ;humidity                  Allocated with name '_main_humidity_131073_48'
                                    564 ;temperature               Allocated with name '_main_temperature_131074_49'
                                    565 ;__1310720001              Allocated to registers 
                                    566 ;cmd                       Allocated to registers 
                                    567 ;__1310720003              Allocated to registers 
                                    568 ;cmd                       Allocated to registers 
                                    569 ;__1966100010              Allocated to registers 
                                    570 ;offset                    Allocated to registers r7 
                                    571 ;__1310720001              Allocated to registers 
                                    572 ;cmd                       Allocated to registers 
                                    573 ;__1310720003              Allocated to registers 
                                    574 ;cmd                       Allocated to registers 
                                    575 ;__1966100013              Allocated to registers 
                                    576 ;offset                    Allocated to registers r7 
                                    577 ;------------------------------------------------------------
                                    578 ;	main.c:229: void main(void)
                                    579 ;	-----------------------------------------
                                    580 ;	 function main
                                    581 ;	-----------------------------------------
      00007C                        582 _main:
                                    583 ;	main.c:235: DHT_DATA = 1;       // Enable pull-up resistor
                                    584 ;	assignBit
      00007C D2 B7            [12]  585 	setb	_P3_7
                                    586 ;	main.c:237: LED_TEST = 0;
                                    587 ;	assignBit
      00007E C2 B6            [12]  588 	clr	_P3_6
                                    589 ;	main.c:240: mDelaymS(10);
      000080 90 00 0A         [24]  590 	mov	dptr,#0x000a
      000083 12r00r12         [24]  591 	lcall	_mDelaymS
                                    592 ;	main.c:98: VFD_putc(cmd);
      000086 75 82 0D         [24]  593 	mov	dpl,#0x0d
      000089 12r00r30         [24]  594 	lcall	_VFD_putc
                                    595 ;	main.c:100: mDelay10uS(100);
      00008C 90 00 64         [24]  596 	mov	dptr,#0x0064
      00008F 12r00r00         [24]  597 	lcall	_mDelay10uS
                                    598 ;	main.c:98: VFD_putc(cmd);
      000092 75 82 0E         [24]  599 	mov	dpl,#0x0e
      000095 12r00r30         [24]  600 	lcall	_VFD_putc
                                    601 ;	main.c:100: mDelay10uS(100);
      000098 90 00 64         [24]  602 	mov	dptr,#0x0064
      00009B 12r00r00         [24]  603 	lcall	_mDelay10uS
                                    604 ;	main.c:242: VFD_printf("Howdy!");
      00009E 90r00r00         [24]  605 	mov	dptr,#___str_0
      0000A1 75 F0 80         [24]  606 	mov	b,#0x80
      0000A4 12r00r47         [24]  607 	lcall	_VFD_printf
                                    608 ;	main.c:244: mDelaymS(1000);
      0000A7 90 03 E8         [24]  609 	mov	dptr,#0x03e8
      0000AA 12r00r12         [24]  610 	lcall	_mDelaymS
                                    611 ;	main.c:246: while(1)
      0000AD                        612 00112$:
                                    613 ;	main.c:98: VFD_putc(cmd);
      0000AD 75 82 0D         [24]  614 	mov	dpl,#0x0d
      0000B0 12r00r30         [24]  615 	lcall	_VFD_putc
                                    616 ;	main.c:100: mDelay10uS(100);
      0000B3 90 00 64         [24]  617 	mov	dptr,#0x0064
      0000B6 12r00r00         [24]  618 	lcall	_mDelay10uS
                                    619 ;	main.c:98: VFD_putc(cmd);
      0000B9 75 82 0E         [24]  620 	mov	dpl,#0x0e
      0000BC 12r00r30         [24]  621 	lcall	_VFD_putc
                                    622 ;	main.c:100: mDelay10uS(100);
      0000BF 90 00 64         [24]  623 	mov	dptr,#0x0064
      0000C2 12r00r00         [24]  624 	lcall	_mDelay10uS
                                    625 ;	main.c:131: DHT_DATA = 0;
                                    626 ;	assignBit
      0000C5 C2 B7            [12]  627 	clr	_P3_7
                                    628 ;	main.c:133: mDelay10uS(100);
      0000C7 90 00 64         [24]  629 	mov	dptr,#0x0064
      0000CA 12r00r00         [24]  630 	lcall	_mDelay10uS
                                    631 ;	main.c:135: DHT_DATA = 1;
                                    632 ;	assignBit
      0000CD D2 B7            [12]  633 	setb	_P3_7
                                    634 ;	main.c:145: while(DHT_DATA)
      0000CF                        635 00121$:
      0000CF 20 B7 FD         [24]  636 	jb	_P3_7,00121$
                                    637 ;	main.c:151: while(!DHT_DATA)
      0000D2                        638 00124$:
      0000D2 30 B7 FD         [24]  639 	jnb	_P3_7,00124$
                                    640 ;	main.c:157: while(DHT_DATA)
      0000D5                        641 00127$:
      0000D5 20 B7 FD         [24]  642 	jb	_P3_7,00127$
                                    643 ;	main.c:165: for(unsigned char i = 0; i < 16; i++)
      0000D8 7F 00            [12]  644 	mov	r7,#0x00
      0000DA                        645 00175$:
      0000DA BF 10 00         [24]  646 	cjne	r7,#0x10,00325$
      0000DD                        647 00325$:
      0000DD 50 24            [24]  648 	jnc	00138$
                                    649 ;	main.c:167: while(!DHT_DATA);	//wait for pulse to begin
      0000DF                        650 00130$:
      0000DF 30 B7 FD         [24]  651 	jnb	_P3_7,00130$
                                    652 ;	main.c:170: mDelay10uS(4);
      0000E2 90 00 04         [24]  653 	mov	dptr,#0x0004
      0000E5 C0 07            [24]  654 	push	ar7
      0000E7 12r00r00         [24]  655 	lcall	_mDelay10uS
      0000EA D0 07            [24]  656 	pop	ar7
                                    657 ;	main.c:172: RH = RH << 1;
      0000EC E5*00            [12]  658 	mov	a,_RH
      0000EE 25*00            [12]  659 	add	a,_RH
      0000F0 F5*00            [12]  660 	mov	_RH,a
      0000F2 E5*01            [12]  661 	mov	a,(_RH + 1)
      0000F4 33               [12]  662 	rlc	a
      0000F5 F5*01            [12]  663 	mov	(_RH + 1),a
                                    664 ;	main.c:173: if(DHT_DATA)
      0000F7 30 B7 03         [24]  665 	jnb	_P3_7,00135$
                                    666 ;	main.c:175: RH = RH | 1;
      0000FA 43*00 01         [24]  667 	orl	_RH,#0x01
                                    668 ;	main.c:178: while(DHT_DATA);	//wait for pulse to end (if it hasnt already)
      0000FD                        669 00135$:
      0000FD 20 B7 FD         [24]  670 	jb	_P3_7,00135$
                                    671 ;	main.c:165: for(unsigned char i = 0; i < 16; i++)
      000100 0F               [12]  672 	inc	r7
      000101 80 D7            [24]  673 	sjmp	00175$
      000103                        674 00138$:
                                    675 ;	main.c:184: for(unsigned char i = 0; i < 16; i++)
      000103 7F 00            [12]  676 	mov	r7,#0x00
      000105                        677 00178$:
      000105 BF 10 00         [24]  678 	cjne	r7,#0x10,00330$
      000108                        679 00330$:
      000108 50 24            [24]  680 	jnc	00147$
                                    681 ;	main.c:186: while(!DHT_DATA);
      00010A                        682 00139$:
      00010A 30 B7 FD         [24]  683 	jnb	_P3_7,00139$
                                    684 ;	main.c:189: mDelay10uS(4);
      00010D 90 00 04         [24]  685 	mov	dptr,#0x0004
      000110 C0 07            [24]  686 	push	ar7
      000112 12r00r00         [24]  687 	lcall	_mDelay10uS
      000115 D0 07            [24]  688 	pop	ar7
                                    689 ;	main.c:191: T = T << 1;
      000117 E5*04            [12]  690 	mov	a,_T
      000119 25*04            [12]  691 	add	a,_T
      00011B F5*04            [12]  692 	mov	_T,a
      00011D E5*05            [12]  693 	mov	a,(_T + 1)
      00011F 33               [12]  694 	rlc	a
      000120 F5*05            [12]  695 	mov	(_T + 1),a
                                    696 ;	main.c:192: if(DHT_DATA)
      000122 30 B7 03         [24]  697 	jnb	_P3_7,00144$
                                    698 ;	main.c:194: T = T | 1;
      000125 43*04 01         [24]  699 	orl	_T,#0x01
                                    700 ;	main.c:197: while(DHT_DATA);
      000128                        701 00144$:
      000128 20 B7 FD         [24]  702 	jb	_P3_7,00144$
                                    703 ;	main.c:184: for(unsigned char i = 0; i < 16; i++)
      00012B 0F               [12]  704 	inc	r7
      00012C 80 D7            [24]  705 	sjmp	00178$
      00012E                        706 00147$:
                                    707 ;	main.c:203: for(unsigned char i = 0; i < 8; i++)
      00012E 7F 00            [12]  708 	mov	r7,#0x00
      000130                        709 00181$:
      000130 BF 08 00         [24]  710 	cjne	r7,#0x08,00335$
      000133                        711 00335$:
      000133 50 20            [24]  712 	jnc	00156$
                                    713 ;	main.c:205: while(!DHT_DATA);
      000135                        714 00148$:
      000135 30 B7 FD         [24]  715 	jnb	_P3_7,00148$
                                    716 ;	main.c:208: mDelay10uS(4);
      000138 90 00 04         [24]  717 	mov	dptr,#0x0004
      00013B C0 07            [24]  718 	push	ar7
      00013D 12r00r00         [24]  719 	lcall	_mDelay10uS
      000140 D0 07            [24]  720 	pop	ar7
                                    721 ;	main.c:210: chksum = chksum << 1;
      000142 E5*08            [12]  722 	mov	a,_main_chksum_327680_70
      000144 FE               [12]  723 	mov	r6,a
      000145 25 E0            [12]  724 	add	a,acc
      000147 F5*08            [12]  725 	mov	_main_chksum_327680_70,a
                                    726 ;	main.c:211: if(DHT_DATA)
      000149 30 B7 03         [24]  727 	jnb	_P3_7,00153$
                                    728 ;	main.c:213: chksum = chksum | 1;
      00014C 43*08 01         [24]  729 	orl	_main_chksum_327680_70,#0x01
                                    730 ;	main.c:216: while(DHT_DATA);
      00014F                        731 00153$:
      00014F 20 B7 FD         [24]  732 	jb	_P3_7,00153$
                                    733 ;	main.c:203: for(unsigned char i = 0; i < 8; i++)
      000152 0F               [12]  734 	inc	r7
      000153 80 DB            [24]  735 	sjmp	00181$
      000155                        736 00156$:
                                    737 ;	main.c:221: unsigned char res = (RH & 0xFF) + (RH >> 8) + (T & 0xFF) + (T >> 8);
      000155 AF*00            [24]  738 	mov	r7,_RH
      000157 E5*01            [12]  739 	mov	a,(_RH + 1)
      000159 2F               [12]  740 	add	a,r7
      00015A FE               [12]  741 	mov	r6,a
      00015B E5*04            [12]  742 	mov	a,_T
      00015D 2E               [12]  743 	add	a,r6
      00015E FE               [12]  744 	mov	r6,a
      00015F E5*05            [12]  745 	mov	a,(_T + 1)
      000161 2E               [12]  746 	add	a,r6
                                    747 ;	main.c:222: if (res != chksum)
      000162 B5*08 02         [24]  748 	cjne	a,_main_chksum_327680_70,00340$
      000165 80 0C            [24]  749 	sjmp	00159$
      000167                        750 00340$:
                                    751 ;	main.c:224: RH = 0xDEAD;
      000167 75*00 AD         [24]  752 	mov	_RH,#0xad
      00016A 75*01 DE         [24]  753 	mov	(_RH + 1),#0xde
                                    754 ;	main.c:225: T = 0xBEEF;
      00016D 75*04 EF         [24]  755 	mov	_T,#0xef
      000170 75*05 BE         [24]  756 	mov	(_T + 1),#0xbe
                                    757 ;	main.c:250: DHT_read_data();
      000173                        758 00159$:
                                    759 ;	main.c:253: humidity[4]=0x00;
      000173 75*0D 00         [24]  760 	mov	(_main_humidity_131073_48 + 0x0004),#0x00
                                    761 ;	main.c:254: humidity[3] = RH % 10 + 0x30;
      000176 75*00 0A         [24]  762 	mov	__moduint_PARM_2,#0x0a
      000179 75*01 00         [24]  763 	mov	(__moduint_PARM_2 + 1),#0x00
      00017C 85*00 82         [24]  764 	mov	dpl,_RH
      00017F 85*01 83         [24]  765 	mov	dph,(_RH + 1)
      000182 12r00r00         [24]  766 	lcall	__moduint
      000185 AE 82            [24]  767 	mov	r6,dpl
      000187 74 30            [12]  768 	mov	a,#0x30
      000189 2E               [12]  769 	add	a,r6
      00018A F5*0C            [12]  770 	mov	(_main_humidity_131073_48 + 0x0003),a
                                    771 ;	main.c:255: humidity[2] = '.';
      00018C 75*0B 2E         [24]  772 	mov	(_main_humidity_131073_48 + 0x0002),#0x2e
                                    773 ;	main.c:256: RH = RH / 10;
      00018F 75*00 0A         [24]  774 	mov	__divuint_PARM_2,#0x0a
      000192 75*01 00         [24]  775 	mov	(__divuint_PARM_2 + 1),#0x00
      000195 85*00 82         [24]  776 	mov	dpl,_RH
      000198 85*01 83         [24]  777 	mov	dph,(_RH + 1)
      00019B 12r00r00         [24]  778 	lcall	__divuint
                                    779 ;	main.c:257: humidity[1] = RH % 10 + 0x30;
      00019E 85 82*00         [24]  780 	mov	_RH,dpl
      0001A1 85 83*01         [24]  781 	mov	(_RH + 1),dph
      0001A4 75*00 0A         [24]  782 	mov	__moduint_PARM_2,#0x0a
      0001A7 75*01 00         [24]  783 	mov	(__moduint_PARM_2 + 1),#0x00
      0001AA 12r00r00         [24]  784 	lcall	__moduint
      0001AD AE 82            [24]  785 	mov	r6,dpl
      0001AF 74 30            [12]  786 	mov	a,#0x30
      0001B1 2E               [12]  787 	add	a,r6
      0001B2 F5*0A            [12]  788 	mov	(_main_humidity_131073_48 + 0x0001),a
                                    789 ;	main.c:258: RH = RH / 10;
      0001B4 75*00 0A         [24]  790 	mov	__divuint_PARM_2,#0x0a
      0001B7 75*01 00         [24]  791 	mov	(__divuint_PARM_2 + 1),#0x00
      0001BA 85*00 82         [24]  792 	mov	dpl,_RH
      0001BD 85*01 83         [24]  793 	mov	dph,(_RH + 1)
      0001C0 12r00r00         [24]  794 	lcall	__divuint
                                    795 ;	main.c:259: humidity[0] = RH % 10 + 0x30;
      0001C3 85 82*00         [24]  796 	mov	_RH,dpl
      0001C6 85 83*01         [24]  797 	mov	(_RH + 1),dph
      0001C9 75*00 0A         [24]  798 	mov	__moduint_PARM_2,#0x0a
      0001CC 75*01 00         [24]  799 	mov	(__moduint_PARM_2 + 1),#0x00
      0001CF 12r00r00         [24]  800 	lcall	__moduint
      0001D2 AE 82            [24]  801 	mov	r6,dpl
      0001D4 74 30            [12]  802 	mov	a,#0x30
      0001D6 2E               [12]  803 	add	a,r6
      0001D7 F5*09            [12]  804 	mov	_main_humidity_131073_48,a
                                    805 ;	main.c:262: temperature[0] = '+';
      0001D9 75*0E 2B         [24]  806 	mov	_main_temperature_131074_49,#0x2b
                                    807 ;	main.c:263: if(T & 0x8000)
      0001DC E5*05            [12]  808 	mov	a,(_T + 1)
      0001DE 30 E7 03         [24]  809 	jnb	acc.7,00102$
                                    810 ;	main.c:264: temperature[0] = '-';
      0001E1 75*0E 2D         [24]  811 	mov	_main_temperature_131074_49,#0x2d
      0001E4                        812 00102$:
                                    813 ;	main.c:265: T = T & 0x7FFF;
      0001E4 53*05 7F         [24]  814 	anl	(_T + 1),#0x7f
                                    815 ;	main.c:266: temperature[5]=0x00;
      0001E7 75*13 00         [24]  816 	mov	(_main_temperature_131074_49 + 0x0005),#0x00
                                    817 ;	main.c:267: temperature[4] = T % 10 + 0x30;
      0001EA 75*00 0A         [24]  818 	mov	__moduint_PARM_2,#0x0a
      0001ED 75*01 00         [24]  819 	mov	(__moduint_PARM_2 + 1),#0x00
      0001F0 85*04 82         [24]  820 	mov	dpl,_T
      0001F3 85*05 83         [24]  821 	mov	dph,(_T + 1)
      0001F6 12r00r00         [24]  822 	lcall	__moduint
      0001F9 AE 82            [24]  823 	mov	r6,dpl
      0001FB 74 30            [12]  824 	mov	a,#0x30
      0001FD 2E               [12]  825 	add	a,r6
      0001FE F5*12            [12]  826 	mov	(_main_temperature_131074_49 + 0x0004),a
                                    827 ;	main.c:268: temperature[3] = '.';
      000200 75*11 2E         [24]  828 	mov	(_main_temperature_131074_49 + 0x0003),#0x2e
                                    829 ;	main.c:269: T = T / 10;
      000203 75*00 0A         [24]  830 	mov	__divuint_PARM_2,#0x0a
      000206 75*01 00         [24]  831 	mov	(__divuint_PARM_2 + 1),#0x00
      000209 85*04 82         [24]  832 	mov	dpl,_T
      00020C 85*05 83         [24]  833 	mov	dph,(_T + 1)
      00020F 12r00r00         [24]  834 	lcall	__divuint
                                    835 ;	main.c:270: temperature[2] = T % 10 + 0x30;
      000212 85 82*04         [24]  836 	mov	_T,dpl
      000215 85 83*05         [24]  837 	mov	(_T + 1),dph
      000218 75*00 0A         [24]  838 	mov	__moduint_PARM_2,#0x0a
      00021B 75*01 00         [24]  839 	mov	(__moduint_PARM_2 + 1),#0x00
      00021E 12r00r00         [24]  840 	lcall	__moduint
      000221 AE 82            [24]  841 	mov	r6,dpl
      000223 74 30            [12]  842 	mov	a,#0x30
      000225 2E               [12]  843 	add	a,r6
      000226 F5*10            [12]  844 	mov	(_main_temperature_131074_49 + 0x0002),a
                                    845 ;	main.c:271: T = T / 10;
      000228 75*00 0A         [24]  846 	mov	__divuint_PARM_2,#0x0a
      00022B 75*01 00         [24]  847 	mov	(__divuint_PARM_2 + 1),#0x00
      00022E 85*04 82         [24]  848 	mov	dpl,_T
      000231 85*05 83         [24]  849 	mov	dph,(_T + 1)
      000234 12r00r00         [24]  850 	lcall	__divuint
                                    851 ;	main.c:272: temperature[1] = T % 10 + 0x30;
      000237 85 82*04         [24]  852 	mov	_T,dpl
      00023A 85 83*05         [24]  853 	mov	(_T + 1),dph
      00023D 75*00 0A         [24]  854 	mov	__moduint_PARM_2,#0x0a
      000240 75*01 00         [24]  855 	mov	(__moduint_PARM_2 + 1),#0x00
      000243 12r00r00         [24]  856 	lcall	__moduint
      000246 AE 82            [24]  857 	mov	r6,dpl
      000248 74 30            [12]  858 	mov	a,#0x30
      00024A 2E               [12]  859 	add	a,r6
      00024B F5*0F            [12]  860 	mov	(_main_temperature_131074_49 + 0x0001),a
                                    861 ;	main.c:98: VFD_putc(cmd);
      00024D 75 82 0D         [24]  862 	mov	dpl,#0x0d
      000250 12r00r30         [24]  863 	lcall	_VFD_putc
                                    864 ;	main.c:100: mDelay10uS(100);
      000253 90 00 64         [24]  865 	mov	dptr,#0x0064
      000256 12r00r00         [24]  866 	lcall	_mDelay10uS
                                    867 ;	main.c:98: VFD_putc(cmd);
      000259 75 82 0E         [24]  868 	mov	dpl,#0x0e
      00025C 12r00r30         [24]  869 	lcall	_VFD_putc
                                    870 ;	main.c:100: mDelay10uS(100);
      00025F 90 00 64         [24]  871 	mov	dptr,#0x0064
      000262 12r00r00         [24]  872 	lcall	_mDelay10uS
                                    873 ;	main.c:275: VFD_padding(offsetRH);
      000265 AF*02            [24]  874 	mov	r7,_offsetRH
                                    875 ;	main.c:115: while(offset != 0)
      000267                        876 00163$:
      000267 EF               [12]  877 	mov	a,r7
      000268 60 0D            [24]  878 	jz	00166$
                                    879 ;	main.c:117: VFD_putc(' ');
      00026A 75 82 20         [24]  880 	mov	dpl,#0x20
      00026D C0 07            [24]  881 	push	ar7
      00026F 12r00r30         [24]  882 	lcall	_VFD_putc
      000272 D0 07            [24]  883 	pop	ar7
                                    884 ;	main.c:118: offset--;
      000274 1F               [12]  885 	dec	r7
                                    886 ;	main.c:275: VFD_padding(offsetRH);
      000275 80 F0            [24]  887 	sjmp	00163$
      000277                        888 00166$:
                                    889 ;	main.c:276: VFD_printf("Humidity: ");
      000277 90r00r07         [24]  890 	mov	dptr,#___str_1
      00027A 75 F0 80         [24]  891 	mov	b,#0x80
      00027D 12r00r47         [24]  892 	lcall	_VFD_printf
                                    893 ;	main.c:277: VFD_printf(humidity);
      000280 90r00r09         [24]  894 	mov	dptr,#_main_humidity_131073_48
      000283 75 F0 40         [24]  895 	mov	b,#0x40
      000286 12r00r47         [24]  896 	lcall	_VFD_printf
                                    897 ;	main.c:279: mDelaymS(1000);
      000289 90 03 E8         [24]  898 	mov	dptr,#0x03e8
      00028C 12r00r12         [24]  899 	lcall	_mDelaymS
                                    900 ;	main.c:280: LED_TEST = 0;
                                    901 ;	assignBit
      00028F C2 B6            [12]  902 	clr	_P3_6
                                    903 ;	main.c:98: VFD_putc(cmd);
      000291 75 82 0D         [24]  904 	mov	dpl,#0x0d
      000294 12r00r30         [24]  905 	lcall	_VFD_putc
                                    906 ;	main.c:100: mDelay10uS(100);
      000297 90 00 64         [24]  907 	mov	dptr,#0x0064
      00029A 12r00r00         [24]  908 	lcall	_mDelay10uS
                                    909 ;	main.c:98: VFD_putc(cmd);
      00029D 75 82 0E         [24]  910 	mov	dpl,#0x0e
      0002A0 12r00r30         [24]  911 	lcall	_VFD_putc
                                    912 ;	main.c:100: mDelay10uS(100);
      0002A3 90 00 64         [24]  913 	mov	dptr,#0x0064
      0002A6 12r00r00         [24]  914 	lcall	_mDelay10uS
                                    915 ;	main.c:283: VFD_padding(offsetT);
      0002A9 AF*06            [24]  916 	mov	r7,_offsetT
                                    917 ;	main.c:115: while(offset != 0)
      0002AB                        918 00170$:
      0002AB EF               [12]  919 	mov	a,r7
      0002AC 60 0D            [24]  920 	jz	00173$
                                    921 ;	main.c:117: VFD_putc(' ');
      0002AE 75 82 20         [24]  922 	mov	dpl,#0x20
      0002B1 C0 07            [24]  923 	push	ar7
      0002B3 12r00r30         [24]  924 	lcall	_VFD_putc
      0002B6 D0 07            [24]  925 	pop	ar7
                                    926 ;	main.c:118: offset--;
      0002B8 1F               [12]  927 	dec	r7
                                    928 ;	main.c:283: VFD_padding(offsetT);
      0002B9 80 F0            [24]  929 	sjmp	00170$
      0002BB                        930 00173$:
                                    931 ;	main.c:284: VFD_printf("Temperature: ");
      0002BB 90r00r12         [24]  932 	mov	dptr,#___str_2
      0002BE 75 F0 80         [24]  933 	mov	b,#0x80
      0002C1 12r00r47         [24]  934 	lcall	_VFD_printf
                                    935 ;	main.c:285: VFD_printf(temperature);
      0002C4 90r00r0E         [24]  936 	mov	dptr,#_main_temperature_131074_49
      0002C7 75 F0 40         [24]  937 	mov	b,#0x40
      0002CA 12r00r47         [24]  938 	lcall	_VFD_printf
                                    939 ;	main.c:287: mDelaymS(1000);
      0002CD 90 03 E8         [24]  940 	mov	dptr,#0x03e8
      0002D0 12r00r12         [24]  941 	lcall	_mDelaymS
                                    942 ;	main.c:288: LED_TEST = 1;
                                    943 ;	assignBit
      0002D3 D2 B6            [12]  944 	setb	_P3_6
                                    945 ;	main.c:290: offsetRH = offsetRH + dirRH;
      0002D5 E5*03            [12]  946 	mov	a,_dirRH
      0002D7 25*02            [12]  947 	add	a,_offsetRH
      0002D9 F5*02            [12]  948 	mov	_offsetRH,a
                                    949 ;	main.c:291: if (offsetRH == 6)
      0002DB 74 06            [12]  950 	mov	a,#0x06
      0002DD B5*02 03         [24]  951 	cjne	a,_offsetRH,00104$
                                    952 ;	main.c:292: dirRH = -1;
      0002E0 75*03 FF         [24]  953 	mov	_dirRH,#0xff
      0002E3                        954 00104$:
                                    955 ;	main.c:293: if (offsetRH == 0)
      0002E3 E5*02            [12]  956 	mov	a,_offsetRH
      0002E5 70 03            [24]  957 	jnz	00106$
                                    958 ;	main.c:294: dirRH = 1;
      0002E7 75*03 01         [24]  959 	mov	_dirRH,#0x01
      0002EA                        960 00106$:
                                    961 ;	main.c:296: offsetT = offsetT + dirT;
      0002EA E5*07            [12]  962 	mov	a,_dirT
      0002EC 25*06            [12]  963 	add	a,_offsetT
      0002EE F5*06            [12]  964 	mov	_offsetT,a
                                    965 ;	main.c:297: if (offsetT == 2)
      0002F0 74 02            [12]  966 	mov	a,#0x02
      0002F2 B5*06 03         [24]  967 	cjne	a,_offsetT,00108$
                                    968 ;	main.c:298: dirT = -1;
      0002F5 75*07 FF         [24]  969 	mov	_dirT,#0xff
      0002F8                        970 00108$:
                                    971 ;	main.c:299: if (offsetT == 0)
      0002F8 E5*06            [12]  972 	mov	a,_offsetT
      0002FA 60 03            [24]  973 	jz	00349$
      0002FC 02r00rAD         [24]  974 	ljmp	00112$
      0002FF                        975 00349$:
                                    976 ;	main.c:300: dirT = 1;
      0002FF 75*07 01         [24]  977 	mov	_dirT,#0x01
                                    978 ;	main.c:302: return;
                                    979 ;	main.c:303: }
      000302 02r00rAD         [24]  980 	ljmp	00112$
                                    981 	.area CSEG    (CODE)
                                    982 	.area CONST   (CODE)
                                    983 	.area CONST   (CODE)
      000000                        984 ___str_0:
      000000 48 6F 77 64 79 21      985 	.ascii "Howdy!"
      000006 00                     986 	.db 0x00
                                    987 	.area CSEG    (CODE)
                                    988 	.area CONST   (CODE)
      000007                        989 ___str_1:
      000007 48 75 6D 69 64 69 74   990 	.ascii "Humidity: "
             79 3A 20
      000011 00                     991 	.db 0x00
                                    992 	.area CSEG    (CODE)
                                    993 	.area CONST   (CODE)
      000012                        994 ___str_2:
      000012 54 65 6D 70 65 72 61   995 	.ascii "Temperature: "
             74 75 72 65 3A 20
      00001F 00                     996 	.db 0x00
                                    997 	.area CSEG    (CODE)
                                    998 	.area XINIT   (CODE)
                                    999 	.area CABS    (ABS,CODE)
